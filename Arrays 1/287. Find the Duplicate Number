// Brute force

class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i=0;i<nums.length-1;i++)
        {
            if(nums[i] == nums[i+1])
            {
                return nums[i];
            }
        }
        return -1;
    }
}

/* Time Complexity:O(Nlogn + N)

Reason: NlogN for sorting the array and O(N) for traversing through the array and checking if adjacent elements are equal or not. But this will distort the array.

Space Complexity:O(1) */

// Better

class Solution {
    public int findDuplicate(int[] nums) {
        int [] freq = new int[nums.length+1];
        for(int i=0;i<nums.length;i++)
        {
            if(freq[nums[i]] == 0)
                freq[nums[i]]++;
            else
                return nums[i];
        }
        return 0;
    }
}

// TC - O(N)
// SC - O(N)

// Optimal - Linked List Cycle method

class Solution {
    public int findDuplicate(int[] nums) {
        
        int slow = nums[0];
        int fast = nums[0];
        
        // do{
        //     slow = nums[slow];
        //     fast = nums[nums[fast]];
        // }while(slow != fast);
        
        while(slow != fast){
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        
        
        fast = nums[0];
        while(slow != fast)
        {
            slow = nums[slow];
            fast = nums[fast];
        }
        
        return slow;
    }
}

/* Time complexity: O(N). Since we traversed through the array only once.

Space complexity: O(1). */

